#!/bin/bash

echo "Hai!"

# classpath
cp="."

mkdir -p lib

# pircbot
pb="pircbot-1.5.0"
if [ -e "lib/${pb}-ssl.jar" ]; then
    #see: https://github.com/mrenouf/pircbot-ssl
    cp+=":lib/${pb}-ssl.jar"
else
    echo "warning: using non-ssl pircbot"
    if [ ! -e "lib/$pb/pircbot.jar" ]; then
        echo "trying to get $pb"
        cd lib
        wget http://www.jibble.org/files/$pb.zip &> /dev/null
        unzip $pb.zip &> /dev/null
        rm $pb.zip &> /dev/null
        cd ..
        [ ! -e "lib/$pb/pircbot.jar" ] && echo "getting $pb failed" && exit
        echo "successfully got $pb"
    fi
    cp+=":lib/$pb/pircbot.jar"
fi

# zemanta 
zem="zemapi"
if [ ! -e "lib/$zem/$zem-java.jar" ]; then
    echo "trying to get $zem"
    mkdir -p lib/$zem
    cd lib/$zem
    #zemzip="zemapi-februar2012-java.zip"
    #wget http://developer.zemanta.com/media/files/code/$zemzip &> /dev/null
    #unzip $zemzip &> /dev/null
    #rm $zemzip &> /dev/null
    wget https://github.com/Zemanta/zemapi-java/raw/3a37e13d7adaf22087a24c4c7125cc683b3a3c0a/$zem-java.jar &> /dev/null
    cd ../..
    [ ! -e "lib/$zem/$zem-java.jar" ] && echo "getting $zem failed" && exit
    echo "successfully got $zem"
fi
cp+=":lib/$zem/$zem-java.jar"

# boilerpipe
bp="boilerpipe-1.2.0"
if [ ! -e "lib/$bp/$bp.jar" ]; then
    echo "trying to get $bp"
    cd lib
    wget https://boilerpipe.googlecode.com/files/$bp-bin.tar.gz &> /dev/null
    tar xvzf $bp-bin.tar.gz &> /dev/null
    rm $bp-bin.tar.gz &> /dev/null
    cd ..
    [ ! -e "lib/$bp/$bp.jar" ] && echo "getting $bp failed" && exit
    echo "successfully got $bp"
fi
cp+=":lib/$bp/$bp.jar:lib/$bp/lib/nekohtml-1.9.13.jar:lib/$bp/lib/xerces-2.9.1.jar"

# prolog wordnet db
wn="WNprolog-3.0"
if [ ! -e "lib/WordNet/wn_s2.db" ]; then
    echo "trying to get $wn"
    cd lib
    wget http://wordnetcode.princeton.edu/3.0/$wn.tar.gz &> /dev/null
    tar xvzf $wn.tar.gz &> /dev/null
    rm $wn.tar.gz &> /dev/null
    if [ -e "prolog/wn_s.pl" ]; then
        cd prolog
        # deleting stuff because I have no space left on target machine :)
        rm -f -- *.5 *.7 *.html *.pdf *.ps
        # strip prolog syntax
        echo "converting $wn"
        for pl in *.pl; do
            skip=$( echo $(expr length "$pl")-6+2 | bc )
            cut -b $skip- -- "$pl" | awk 'sub("..$", "")' > "$(basename "$pl" .pl).db"
            rm -f -- "$pl"
        done
        echo "compressing $wn"
        cut -d, -f 1,3 wn_s.db > wn_s2.db
        sed -i "s/,'/,/g" wn_s2.db
        sed -i "s/'$//g" wn_s2.db
        # stoplist and weights - you might want to do better than touch :)
        touch stoplist weights
        cd ..
        mv prolog WordNet
    fi
    cd ..
    [ ! -e "lib/WordNet" ] && echo "getting $wn failed" && exit
    echo "successfully got $wn"
fi

# bitlyj
bitly="bitlyj-2.0.0"
if [ ! -e "lib/$bitly.jar" ]; then
    echo "trying to get $bitly"
    mkdir lib &> /dev/null
    cd lib
    wget http://bitlyj.googlecode.com/files/$bitly.jar &> /dev/null
    cd ..
    [ ! -e "lib/$bitly.jar" ] && echo "getting $bitly failed" && exit
    echo "successfully got $bitly"
fi
cp+=":lib/$bitly.jar"

if [ "$(which scalac)" == "" ]; then
    scalaver="2.11.6"
    echo "trying to get scala-$scalaver"
    wget http://downloads.typesafe.com/scala/$scalaver/scala-$scalaver.tgz &> /dev/null
    tar -xvzf scala-$scalaver.tgz &> /dev/null
    PATH="$PATH:scala-$scalaver/bin"
    [ "$(which scalac)" == "" ] && echo "getting scala-$scalaver failed" && exit
fi

args="$1"
bot="haibot"
outdir="bin"
docdir="doc"
cp+=":$outdir"
logdir="logs"
mkdir -p -- "$logdir"
mkdir -p -- "$outdir"

if [ "$(which t)"         == "" ]; then echo "$bot might work, if not, set up t - the twitter client."; fi
if [ "$(which fbcmd)"     == "" ]; then echo "$bot might work, if not, set up fbcmd - the facebook client."; fi
if [ "$(which tesseract)" == "" ]; then echo "$bot might work, if not, sudo apt-get install tesseract-ocr"; fi
if [ "$(which gocr)"      == "" ]; then echo "$bot might work, if not, sudo apt-get install gocr"; fi
if [ "$(which ocrad)"     == "" ]; then echo "$bot might work, if not, sudo apt-get install ocrad"; fi
if [ "$(which convert)"   == "" ]; then echo "$bot might work, if not, sudo apt-get install imagemagick"; fi

compile() {
    echo "compiling $bot"
    rm -rf -- "$outdir" &> /dev/null
    mkdir -p -- "$outdir"
    local warnings=$(scalac -Y 2>&1 | grep warn | cut -d' ' -f 3 | tr '\n' ' ')
    scalac $SCALA_PLUGINS $warnings -Xlint -feature -unchecked -optimize -d $outdir -cp $cp -- *.scala
}

run() {
    local botname="org.psywerx.$bot"
    local runsecure="scala -Djava.security.manager -Djava.security.policy==haibot.policy -cp $cp"
    local rununsecure="scala -cp $cp"
    case "$args" in
        -c)   echo "not gonna run $bot...";;
        -d)   echo "making docs..." && scaladoc -d $docdir -cp $cp -- *.scala;;
        -fb)  echo "starting findbugs" && findbugs -project findbugs.xml -effort:max;;
        -s)   echo "dropping into scala console" && $runsecure;;
        -us)  echo "dropping into unsecure scala console" && $rununsecure;;
        -f)   echo "running $bot..." && $runsecure $botname;;
        -uf)  echo "running $bot unsecurely..." && $rununsecure $botname;;
        -nop) echo "doing nothing...";;
        *)    echo "putting $bot into background..." && { $runsecure $botname &>> $logdir/$bot.log & }
    esac
}

if [[ "$args" == "-c" ]] || [[ $bot.scala -nt $outdir/org/psywerx/$bot.class ]] || [[ util.scala -nt $outdir/org/psywerx/util.class ]] || [[ OCR.scala -nt $outdir/org/psywerx/OCR.class ]] || [[ WordNet.scala -nt $outdir/org/psywerx/WordNet.class ]] || [[ Caption.scala -nt $outdir/org/psywerx/Caption.class ]]; then
    compile && run
else
    run
fi
