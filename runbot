#!/bin/bash

echo "Hai!"

#classpath
cp="."

#pircbot
pb="pircbot-1.5.0"
if [ ! -e "lib/$pb/pircbot.jar" ]; then
    echo "trying to get $pb"
    mkdir lib &> /dev/null
    cd lib
    wget http://www.jibble.org/files/$pb.zip &> /dev/null
    unzip $pb.zip &> /dev/null
    rm $pb.zip &> /dev/null
    cd ..
    [ ! -e "lib/$pb/pircbot.jar" ] && echo "getting $pb failed" && exit
    echo "sucessfully got $pb"
fi
cp+=":lib/$pb/pircbot.jar"

#zemanta
zem="zemapi"
if [ ! -e "lib/$zem/$zem-java.jar" ]; then
    echo "trying to get $zem"
    mkdir lib &> /dev/null
    cd lib
    mkdir $zem &> /dev/null
    cd $zem
    zemzip="zemapi-februar2012-java.zip"
    wget http://developer.zemanta.com/media/files/code/$zemzip &> /dev/null
    unzip $zemzip &> /dev/null
    rm $zemzip &> /dev/null
    cd ..
    cd ..
    [ ! -e "lib/$zem/$zem-java.jar" ] && echo "getting $zem failed" && exit
    echo "sucessfully got $zem"
fi
cp+=":lib/$zem/$zem-java.jar"

#boilerpipe
bp="boilerpipe-1.2.0"
if [ ! -e "lib/$bp/$bp.jar" ]; then
    echo "trying to get $bp"
    mkdir lib &> /dev/null
    cd lib
    wget https://boilerpipe.googlecode.com/files/$bp-bin.tar.gz &> /dev/null
    tar xvzf $bp-bin.tar.gz &> /dev/null
    rm $bp-bin.tar.gz &> /dev/null
    cd ..
    [ ! -e "lib/$bp/$bp.jar" ] && echo "getting $bp failed" && exit
    echo "sucessfully got $bp"
fi
cp+=":lib/$bp/$bp.jar:lib/$bp/lib/nekohtml-1.9.13.jar:lib/$bp/lib/xerces-2.9.1.jar"

#prolog wordnet db
wn="WNprolog-3.0"
if [ ! -e "lib/prolog/wn_ant.db" ]; then
    echo "trying to get $wn"
    mkdir lib &> /dev/null
    cd lib
    wget http://wordnetcode.princeton.edu/3.0/$wn.tar.gz &> /dev/null
    tar xvzf $wn.tar.gz &> /dev/null
    rm $wn.tar.gz &> /dev/null
    if [ -e "prolog/wn_ant.pl" ]; then
        cd prolog
        #strip prolog syntax
        for db in *.pl; do
            skip=$( echo `expr length $db`-6+2 | bc )
            cat $db | cut -b $skip- | awk 'sub("..$", "")' > `basename $db .pl`.db
        done
        cd ..
    fi
    cd ..
    [ ! -e "lib/prolog" ] && echo "getting $wn failed" && exit
    echo "sucessfully got $wn"
fi

#bitlyj
bitly="bitlyj-2.0.0"
if [ ! -e "lib/$bitly.jar" ]; then
    echo "trying to get $bitly"
    mkdir lib &> /dev/null
    cd lib
    wget http://bitlyj.googlecode.com/files/$bitly.jar &> /dev/null
    cd ..
    [ ! -e "lib/$bitly.jar" ] && echo "getting $bitly failed" && exit
    echo "sucessfully got $bitly"
fi
cp+=":lib/$bitly.jar"

if [ "`which t`" == "" ]; then echo "it might work anyway, if not, set up t - the twitter client."; fi
if [ "`which fbcmd`" == "" ]; then echo "it might work anyway, if not, set up fbcmd - the facebook client."; fi
if [ "`which tesseract`" == "" ]; then echo "it might work anyway, if not, sudo apt-get install tesseract"; fi
if [ "`which gocr`" == "" ]; then echo "it might work anyway, if not, sudo apt-get install gocr"; fi
if [ "`which cuneiform`" == "" ]; then echo "it might work anyway, if not, sudo apt-get install cuneiform"; fi
if [ "`which ocrad`" == "" ]; then echo "it might work anyway, if not, sudo apt-get install ocrad"; fi
if [ "`which convert`" == "" ]; then echo "it might work anyway, if not, sudo apt-get install imagemagick"; fi

args="$1"
bot="haibot"
outdir="bin"
cp+=":$outdir"
logdir="logs"
mkdir $logdir &> /dev/null
mkdir $outdir &> /dev/null

compile() {
    echo "static checking :)"
    echo "  checking if forgot to put Seq(...).random"
    grep --color=auto -rnE 'Seq[(]([^")]*"[^"]*")*[^)]*[)][ ]*([+][^+]|,[ ]*$)' *.scala
    echo "  checking if forgot s before string interpolation"
    grep --color=auto -rnP '[,( +]["]{1,3}(?!.*[,( +]s").*[$][^"|]' *.scala

    echo "compiling $bot"
    rm -rf $outdir &> /dev/null
    mkdir $outdir &> /dev/null
    scalac -Xlint -deprecation -optimise -feature -d $outdir -cp $cp util.scala OCR.scala $bot.scala `ls test.scala`
}

run() {
    runcmd="scala -cp $cp org.psywerx.$bot.$bot"
    case "$args" in
        -c) echo "not gonna run $bot...";;
        -s) echo "dropping into scala console" && scala -cp $cp;;
        -t) echo "running tests" && scala -cp $cp haibot.test;;
        -f) echo "running $bot..." && $runcmd;;
         *) echo "putting $bot into background..." && { $runcmd &>> $logdir/$bot.log & }
    esac
}

if [[ $bot.scala -nt $outdir/org/psywerx/$bot/$bot.class ]] || [[ Utils.scala -nt $outdir/org/psywerx/util.class ]] || [[ Utils.scala -nt $outdir/org/psywerx/OCR.class ]] || [[ "$args" == "-c" ]]; then
    compile && run
else
    run
fi
