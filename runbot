#!/bin/bash

echo "Hai!"

#classpath
cp="."

#pircbot
pb="pircbot-1.5.0"
if [ ! -e "lib/$pb/pircbot.jar" ]; then
  echo "trying to get $pb"
  mkdir lib &> /dev/null
  cd lib
  wget http://www.jibble.org/files/$pb.zip &> /dev/null
  unzip $pb.zip &> /dev/null
  rm $pb.zip &> /dev/null
  cd ..
  [ ! -e "lib/$pb/pircbot.jar" ] && echo "getting $pb failed" && exit
  echo "successfully got $pb"
fi
cp+=":lib/$pb/pircbot.jar"

#zemanta
zem="zemapi"
if [ ! -e "lib/$zem/$zem-java.jar" ]; then
  echo "trying to get $zem"
  mkdir lib &> /dev/null
  cd lib
  mkdir $zem &> /dev/null
  cd $zem
  zemzip="zemapi-februar2012-java.zip"
  wget http://developer.zemanta.com/media/files/code/$zemzip &> /dev/null
  unzip $zemzip &> /dev/null
  rm $zemzip &> /dev/null
  cd ..
  cd ..
  [ ! -e "lib/$zem/$zem-java.jar" ] && echo "getting $zem failed" && exit
  echo "successfully got $zem"
fi
cp+=":lib/$zem/$zem-java.jar"

#boilerpipe
bp="boilerpipe-1.2.0"
if [ ! -e "lib/$bp/$bp.jar" ]; then
  echo "trying to get $bp"
  mkdir lib &> /dev/null
  cd lib
  wget https://boilerpipe.googlecode.com/files/$bp-bin.tar.gz &> /dev/null
  tar xvzf $bp-bin.tar.gz &> /dev/null
  rm $bp-bin.tar.gz &> /dev/null
  cd ..
  [ ! -e "lib/$bp/$bp.jar" ] && echo "getting $bp failed" && exit
  echo "successfully got $bp"
fi
cp+=":lib/$bp/$bp.jar:lib/$bp/lib/nekohtml-1.9.13.jar:lib/$bp/lib/xerces-2.9.1.jar"

#prolog wordnet db
wn="WNprolog-3.0"
if [ ! -e "lib/WordNet/wn_s2.db" ]; then
  echo "trying to get $wn"
  mkdir lib &> /dev/null
  cd lib
  wget http://wordnetcode.princeton.edu/3.0/$wn.tar.gz &> /dev/null
  tar xvzf $wn.tar.gz &> /dev/null
  rm $wn.tar.gz &> /dev/null
  if [ -e "prolog/wn_s.pl" ]; then
    cd prolog
    #deleting stuff only because I have no space left on target machine :)
    rm -f *.5 *.7 *.html *.pdf *.ps 
    #strip prolog syntax
    echo "compressing $wn"
    for db in *.pl; do
      skip=$( echo `expr length $db`-6+2 | bc )
      cat $db | cut -b $skip- | awk 'sub("..$", "")' > `basename $db .pl`.db
      rm -f $db
      if [ "$db" == "wn_s.pl" ]; then
        cat wn_s.db | cut -d, -f 1,3 > wn_s2.db
      fi
    done
    # stoplist and weights - you might want to do better than touch :)
    touch stoplist weights
    cd ..
    mv prolog WordNet
  fi
  cd ..
  [ ! -e "lib/WordNet" ] && echo "getting $wn failed" && exit
  echo "successfully got $wn"
fi

#bitlyj
bitly="bitlyj-2.0.0"
if [ ! -e "lib/$bitly.jar" ]; then
  echo "trying to get $bitly"
  mkdir lib &> /dev/null
  cd lib
  wget http://bitlyj.googlecode.com/files/$bitly.jar &> /dev/null
  cd ..
  [ ! -e "lib/$bitly.jar" ] && echo "getting $bitly failed" && exit
  echo "successfully got $bitly"
fi
cp+=":lib/$bitly.jar"

if [ "`which t`" == "" ]; then echo "it might work anyway, if not, set up t - the twitter client."; fi
if [ "`which fbcmd`" == "" ]; then echo "it might work anyway, if not, set up fbcmd - the facebook client."; fi
if [ "`which tesseract`" == "" ]; then echo "it might work anyway, if not, sudo apt-get install tesseract"; fi
if [ "`which gocr`" == "" ]; then echo "it might work anyway, if not, sudo apt-get install gocr"; fi
if [ "`which ocrad`" == "" ]; then echo "it might work anyway, if not, sudo apt-get install ocrad"; fi
if [ "`which convert`" == "" ]; then echo "it might work anyway, if not, sudo apt-get install imagemagick"; fi

args="$1"
bot="haibot"
outdir="bin"
docdir="doc"
cp+=":$outdir"
logdir="logs"
mkdir $logdir &> /dev/null
mkdir $outdir &> /dev/null

compile() {
  echo "compiling $bot"
  rm -rf $outdir &> /dev/null
  mkdir $outdir &> /dev/null
  scalac $SCALA_PLUGINS `scalac -Y 2>&1 | grep warn | cut -d' ' -f 3 | tr '\n' ' '` -Xlint -feature -unchecked -optimize -d $outdir -cp $cp *.scala
}

run() {
  runcmd="scala -Djava.security.manager -Djava.security.policy==haibot.policy -cp $cp org.psywerx.$bot"
  case "$args" in
    -c) echo "not gonna run $bot...";;
    -d) echo "making docs..." && scaladoc -d $docdir -cp $cp *.scala;;
    -fb) echo "starting findbugs" && findbugs -project findbugs.xml -effort:max;;
    -us) echo "dropping into scala console" && scala -cp $cp;;
    -s) echo "dropping into scala console" && scala -Djava.security.manager -Djava.security.policy==haibot.policy -cp $cp;;
    -f) echo "running $bot..." && $runcmd;;
     *) echo "putting $bot into background..." && { $runcmd &>> $logdir/$bot.log & }
  esac
}

if [[ $bot.scala -nt $outdir/org/psywerx/$bot.class ]] || [[ util.scala -nt $outdir/org/psywerx/util.class ]] || [[ OCR.scala -nt $outdir/org/psywerx/OCR.class ]] || [[ "$args" == "-c" ]]; then
  compile && run
else
  run
fi
