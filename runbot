#!/bin/bash

echo "Hai!"

# classpath
cp="."

mkdir -p lib

# pircbot-ssl
pb="pircbot-1.5.0-ssl"
#see: https://github.com/mrenouf/pircbot-ssl ... with one simple code change, regular pircbot works too
[ -e "lib/${pb}.jar" ] || { echo "$pb not found"; exit 1; }
cp="${cp}:lib/${pb}.jar"

# zemanta 
zem="zemapi"
[ -e "lib/$zem/$zem-java.jar" ] || {
    echo "trying to get $zem"
    mkdir -p lib/$zem
    cd lib/$zem
    #zemzip="zemapi-februar2012-java.zip"
    #wget http://developer.zemanta.com/media/files/code/$zemzip > /dev/null 2>&1
    #unzip $zemzip > /dev/null 2>&1
    #rm $zemzip > /dev/null 2>&1
    wget https://github.com/Zemanta/zemapi-java/raw/3a37e13d7adaf22087a24c4c7125cc683b3a3c0a/$zem-java.jar > /dev/null 2>&1
    cd ../..
    [ -e "lib/$zem/$zem-java.jar" ] || { echo "getting $zem failed"; exit 1; }
    echo "successfully got $zem"
}
cp="${cp}:lib/$zem/$zem-java.jar"

# boilerpipe
bp="boilerpipe-1.2.0"
[ -e "lib/$bp/$bp.jar" ] || {
    echo "trying to get $bp"
    cd lib
    wget https://boilerpipe.googlecode.com/files/$bp-bin.tar.gz > /dev/null 2>&1
    tar xvzf $bp-bin.tar.gz > /dev/null 2>&1
    rm $bp-bin.tar.gz > /dev/null 2>&1
    cd ..
    [ -e "lib/$bp/$bp.jar" ] || { echo "getting $bp failed"; exit 1; }
    echo "successfully got $bp"
}
cp="${cp}:lib/$bp/$bp.jar:lib/$bp/lib/nekohtml-1.9.13.jar:lib/$bp/lib/xerces-2.9.1.jar"

# prolog wordnet db
wn="WNprolog-3.0"
[ -e "lib/WordNet/wn_s2.db" ] || {
    echo "trying to get $wn"
    cd lib
    wget http://wordnetcode.princeton.edu/3.0/$wn.tar.gz > /dev/null 2>&1
    tar xvzf $wn.tar.gz > /dev/null 2>&1
    rm $wn.tar.gz > /dev/null 2>&1
    [ -e "prolog/wn_s.pl" ] || { echo "getting $wn failed"; exit 1; }
    cd prolog
    # deleting stuff because I have no space left on target machine :)
    rm -f -- *.5 *.7 *.html *.pdf *.ps
    # strip prolog syntax
    echo "converting $wn"
    for pl in *.pl; do
        skip=$( echo $(expr length "$pl")-6+2 | bc )
        cut -b $skip- -- "$pl" | awk 'sub("..$", "")' > "$(basename "$pl" .pl).db"
        rm -f -- "$pl"
    done
    echo "compressing $wn"
    cut -d, -f 1,3 wn_s.db > wn_s2.db
    sed -i "s/,'/,/g" wn_s2.db
    sed -i "s/'$//g" wn_s2.db
    # stoplist and weights - you might want to do better than touch :)
    touch stoplist weights
    cd ..
    mv prolog WordNet
    cd ..
    [ -e "lib/WordNet" ] || { echo "getting $wn failed"; exit 1; }
    echo "successfully got $wn"
}

# bitlyj
bitly="bitlyj-2.0.0"
[ -e "lib/$bitly.jar" ] || {
    echo "trying to get $bitly"
    mkdir lib > /dev/null 2>&1
    cd lib
    wget http://bitlyj.googlecode.com/files/$bitly.jar > /dev/null 2>&1
    cd ..
    [ -e "lib/$bitly.jar" ] || { echo "getting $bitly failed"; exit 1; }
    echo "successfully got $bitly"
}
cp="${cp}:lib/$bitly.jar"

[ "$(command -v scalac)" ] || {
    scalaver="2.11.6"
    if [ ! -e "scala-$scalaver/bin/scalac" ]; then
        echo "trying to get scala-$scalaver"
        wget http://downloads.typesafe.com/scala/$scalaver/scala-$scalaver.tgz > /dev/null 2>&1
        tar -xvzf scala-$scalaver.tgz > /dev/null 2>&1
    fi
    PATH="${PATH}:scala-$scalaver/bin"
    [ "$(command -v scalac)" ] || { echo "getting scala-$scalaver failed"; exit 1; }
    echo "successfully got scala-$scalaver"
}

args="$1"
bot="haibot"
outdir="bin"
docdir="doc"
cp="${cp}:$outdir"
logdir="logs"
mkdir -p -- "$logdir"
mkdir -p -- "$outdir"

[ "$(command -v t)"         ] || echo "$bot might work, if not, set up t - the twitter client."
[ "$(command -v fbcmd)"     ] || echo "$bot might work, if not, set up fbcmd - the facebook client."
[ "$(command -v tesseract)" ] || echo "$bot might work, if not, sudo apt-get install tesseract-ocr"
[ "$(command -v gocr)"      ] || echo "$bot might work, if not, sudo apt-get install gocr"
[ "$(command -v ocrad)"     ] || echo "$bot might work, if not, sudo apt-get install ocrad"
[ "$(command -v convert)"   ] || echo "$bot might work, if not, sudo apt-get install imagemagick"

compile() {
    echo "compiling $bot"
    rm -rf -- "$outdir" > /dev/null 2>&1
    mkdir -p -- "$outdir"
    warnings=$(scalac -Y 2>&1 | grep warn | cut -d' ' -f 3 | tr '\n' ' ')
    # TODO shwordsplit on zsh
    scalac $SCALA_PLUGINS $warnings -Xlint -feature -unchecked -optimize -d $outdir -cp $cp -- *.scala
}

run() {
    botname="org.psywerx.$bot"
    runsecure="scala -Djava.security.manager -Djava.security.policy==haibot.policy -cp $cp"
    rununsecure="scala -cp $cp"
    case "$args" in
        -c)   echo "not gonna run $bot...";;
        -d)   echo "making docs..." && scaladoc -d $docdir -cp $cp -- *.scala;;
        -fb)  echo "starting findbugs" && findbugs -project findbugs.xml -effort:max;;
        -s)   echo "dropping into scala console" && $runsecure;;
        -us)  echo "dropping into unsecure scala console" && $rununsecure;;
        -f)   echo "running $bot..." && $runsecure $botname;;
        -uf)  echo "running $bot unsecurely..." && $rununsecure $botname;;
        -nop) echo "doing nothing...";;
        *)    echo "putting $bot into background..." && { $runsecure $botname >> $logdir/$bot.log 2>&1 & }
    esac
}

if [ "$args" = "-c" ] || [ $bot.scala -nt $outdir/org/psywerx/$bot.class ] || [ util.scala -nt $outdir/org/psywerx/util.class ] || [ OCR.scala -nt $outdir/org/psywerx/OCR.class ] || [ WordNet.scala -nt $outdir/org/psywerx/WordNet.class ] || [ Caption.scala -nt $outdir/org/psywerx/Caption.class ]; then
    compile && run
else
    run
fi

